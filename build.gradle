plugins {
	id 'fabric-loom' version '1.5-SNAPSHOT'
	id 'maven-publish'
	id 'org.jetbrains.kotlin.jvm' version("${kotlin_version}")
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
	mavenCentral()

	exclusiveContent {
		forRepository {
			maven {
				name = "Modrinth"
				url = "https://api.modrinth.com/maven"
			}
		}
//		forRepositories(fg.repository) // Only add this if you're using ForgeGradle, otherwise remove this line
		filter {
			includeGroup "maven.modrinth"
		}
	}

	maven {
		name = 'Ladysnake Mods'
		url = 'https://maven.ladysnake.org/releases'
	}

	maven {
		name = 'JitPack'
		url = 'https://jitpack.io'
	}

	//JEI
	maven {
		// location of the maven that hosts JEI files before January 2023
		name = "Progwml6's maven"
		url = "https://dvs1.progwml6.com/files/maven/"
	}
	maven {
		// location of the maven that hosts JEI files since January 2023
		name = "Jared's maven"
		url = "https://maven.blamejared.com/"
	}
	maven {
		// location of a maven mirror for JEI files, as a fallback
		name = "ModMaven"
		url = "https://modmaven.dev"
	}

	// REI
	maven { url = "https://maven.shedaniel.me/" }

	// Mod Menu
	maven { url = "https://maven.terraformersmc.com/releases/" }
	// Create, Porting Lib, Forge Tags, Milk Lib, Registrate
	maven { url = "https://mvn.devos.one/snapshots/" }

	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
}

//configurations.configureEach {
//	resolutionStrategy {
//		force("net.fabricmc:fabric-loader:$loader_version")
//	}
//}
dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	modImplementation("net.fabricmc:fabric-language-kotlin:1.10.18+kotlin.1.9.22")

	include(modImplementation('com.github.Chocohead:Fabric-ASM:v2.3'))
	include(implementation(annotationProcessor("io.github.llamalad7:mixinextras-fabric:0.2.2")))

	implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlin_version}"

	//Mod Menu
	// /* doesn't work for some reason */ modImplementation("maven.modrinth:cloth-config:$clothconfig_version")
	modRuntimeOnly("com.terraformersmc:modmenu:$modmenu_version")

	//JEI
	//From: https://maven.blamejared.com/mezz/jei/
	modImplementation files("libraries/jei/jei-1.20.1-fabric-15.3.0.4.jar")

	// REI
	modCompileOnly "me.shedaniel:RoughlyEnoughItems-api-fabric:$rei_version"
	modCompileOnly "me.shedaniel:RoughlyEnoughItems-default-plugin-fabric:$rei_version"

	// Create - dependencies are added transitively
//	modCompileOnly("com.simibubi.create:create-fabric-${minecraft_version}:${create_version}")

// Datagen counts as runtime, it's safe to run datagen as long as our compat mods are modCompileOnly.

	// Supplementaries
//	modRuntimeOnly("maven.modrinth:supplementaries:${supplementaries_version}")
//	modRuntimeOnly("maven.modrinth:dCCkNFwE:${supplementaries_squared_version_id}")
//	modRuntimeOnly("maven.modrinth:amendments:${amendments_version}")
//	modRuntimeOnly("maven.modrinth:moonlight:${moonlight_version}")

	// Comforts
//	modRuntimeOnly "dev.onyxstudios.cardinal-components-api:cardinal-components-base:${cca_version}"
//	modRuntimeOnly "dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${cca_version}"
//	modRuntimeOnly("com.illusivesoulworks.spectrelib:spectrelib-fabric:${spectrelib_version}") // { exclude(group = "net.fabricmc.fabric-api") }
//	modRuntimeOnly("maven.modrinth:comforts:${comforts_version}")

	// BotanyPots
	// This way of loading it doesn't work, compat still does in practice though
//	modImplementation "net.darkhax.bookshelf:Bookshelf-Fabric-${minecraft_version}:${bookshelf_version}"
//	modRuntimeOnly("maven.modrinth:uy4Cnpcm:${bookshelf_version_id}")
//	modRuntimeOnly("maven.modrinth:U6BUTZ7K:${botanypots_version_id}")

	//BetterEnd
	modCompileOnly("maven.modrinth:gc8OEnCC:${betterend_version}")
	modCompileOnly("com.github.quiqueck:BCLib:${bclib_version}")
	modCompileOnly("com.github.quiqueck:WunderLib:${wunderlib_version}")

	// Twigs
//	modRuntimeOnly("maven.modrinth:twigs:${twigs_version}")

	// Dye Depot
//	modRuntimeOnly("maven.modrinth:dye-depot:ldJ6vsnR")

	// Botania
//	modImplementation("dev.onyxstudios.cardinal-components-api:cardinal-components-base:${cca_version}")
//	modImplementation("dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${cca_version}")
//	modImplementation("maven.modrinth:trinkets:${trinkets_version}")
//	modImplementation("maven.modrinth:botania:${botania_version}")
//	modImplementation("maven.modrinth:patchouli:${patchouli_version}")

//	modRuntimeOnly("maven.modrinth:trinkets:${trinkets_version}")
//	modRuntimeOnly("maven.modrinth:botania:${botania_version}")
//	modRuntimeOnly("maven.modrinth:patchouli:${patchouli_version}")


	// Another Furniture

	// Snowy Spirit
//	modRuntimeOnly("maven.modrinth:UiFDlI7w:VItD3Q0A")

	// uncomment if needed
	//include implementation("net.dv8tion:JDA:${project.jda_version}") {
	//	exclude(module : "opus-java")
	//}
	// implementation 'com.opencsv:opencsv:5.7.1'  //Library Unused
	//include('com.opencsv:opencsv:5.7.1')
	//

	// Uncomment the following line to enable the deprecated Fabric API modules.
	// These are included in the Fabric API production distribution and allow you to update your mod to the latest modules at a later more convenient time.
	// modImplementation "net.fabricmc.fabric-api:fabric-api-deprecated:${project.fabric_version}"
}


kotlin {
	jvmToolchain {
		languageVersion.set(JavaLanguageVersion.of(17))
	}

	jvmToolchain(17)
}

processResources {
	inputs.property "version", project.version
	filteringCharset "UTF-8"

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

def dataOutput = 'src/main/generated'
loom {
	runs {
		datagen {
			//server()
			inherit(client)

			name "Data Generation"
			vmArg "-Dfabric-api.datagen"
			vmArg "-Dfabric-api.datagen.output-dir=${file(dataOutput)}"
			// vmArg('-Dfabric-api.datagen.strict-validation=true')

			runDir "build/datagen"
		}
	}
	accessWidenerPath = file("src/main/resources/mint.accesswidener")
}

sourceSets {
	main {
		resources {
			srcDirs += [
					'src/main/generated'
			]
		}
	}
}


java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}

//Sources:
//https://github.com/ApexModder/MultiPlatform-Template/blob/master/fabric/build.gradle
